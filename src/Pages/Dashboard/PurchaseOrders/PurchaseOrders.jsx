import React, { useEffect, useState, useMemo } from "react";
import DataTable from "react-data-table-component";
import "./PurchaseOrders.css";
import {
  DELETEDOC,
  GETCOLLECTION,
  GETDOC,
  UPDATEDOC,
} from "../../../../server";
import { CreateToast } from "../../../main";
import * as XLSX from "xlsx";
import BulkImportPurchaseOrders from "./BulkImportPurchaseOrders";
import { IoEyeSharp } from "react-icons/io5";
import { MdEdit } from "react-icons/md";
import { MdDeleteOutline } from "react-icons/md";
import secureLocalStorage from "react-secure-storage";

const PurchaseOrders = ({ canEdit }) => {
  const [purchaseOrders, setPurchaseOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeInnerPage, setActiveInnerPage] = useState("Home");
  const [searchTerm, setSearchTerm] = useState("");
  const [viewMode, setViewMode] = useState("standard");

  // Enhanced filter states
  const [filters, setFilters] = useState({
    paymentStatus: "all",
    deliveryStatus: "all",
    clientId: "all",
    dateRange: "all",
    customDateFrom: "",
    customDateTo: "",
    profitRange: "all",
    amountRange: "all",
    customAmountMin: "",
    customAmountMax: "",
    hasGrn: "all",
    searchDate: "purchaseOrderDate",
    hasAttachments: "all",
  });
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);

  const [invoices, setInvoices] = useState([]);
  const [buyers, setBuyers] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [targetOrder, setTargetOrder] = useState(null);
  const [initialEditing, setInitialEditing] = useState(false);
  const [selectedRows, setSelectedRows] = useState([]);
  const [toggleCleared, setToggleCleared] = useState(false);
  const [settings, setSettings] = useState(null);
  const [showChangeModal, setShowChangeModal] = useState(false);

  const fetchSettings = async () => {
    try {
      setSettings(await GETDOC("settings", "1"));
    } catch (error) {
      console.log(error);

      CreateToast("ุญุฏุซ ุฎุทุง ูุง", "e");
    }
  };
  useEffect(() => {
    fetchSettings();
  }, []);
  const formatPaymentDueDate = (dueDateTimestamp) => {
    if (!dueDateTimestamp) return "ุบูุฑ ูุญุฏุฏ";
    const dueDate = new Date(dueDateTimestamp.seconds * 1000);
    return dueDate.toLocaleDateString("ar-EG");
  };
  const handleRowSelected = (state) => setSelectedRows(state.selectedRows);

  const contextActions = useMemo(() => {
    const handleClear = () => {
      setSelectedRows([]);
      setToggleCleared(!toggleCleared);
    };

    const handleDelete = async () => {
      if (selectedRows.length === 0) {
        CreateToast("ูู ูุชู ุชุญุฏูุฏ ุฃู ุฃูุงูุฑ ุชูุฑูุฏ ููุญุฐู", "w");
        return;
      }

      try {
        for (let order of selectedRows) {
          await DELETEDOC("purchaseOrders", order.ID);
        }
        CreateToast("ุชู ุญุฐู ุงูุฃูุงูุฑ ุงููุญุฏุฏุฉ ุจูุฌุงุญ", "s");
        setSelectedRows([]);
        setToggleCleared(!toggleCleared);
        fetchOrders();
      } catch (error) {
        console.error(error);
        CreateToast("ูุดู ูู ุญุฐู ุงูุฃูุงูุฑ", "e");
      }
    };

    const handleExport = () => {
      if (selectedRows.length === 0) {
        CreateToast("ูู ูุชู ุชุญุฏูุฏ ุฃู ุฃูุงูุฑ ุชูุฑูุฏ ููุชุตุฏูุฑ", "w");
        return;
      }

      try {
        const headers = [
          "ุฑูู ุงูุฃูุฑ",
          "ุชุงุฑูุฎ ุงูุฃูุฑ",
          "ุงูุดุฑูุฉ",
          "ุฑูู ุงูุฑ ุชูุฑูุฏ ุงูุนููู",
          "ุญุงูุฉ ุงูุฏูุน",
          "ุญุงูุฉ ุงูุชุณููู",
          "ูุจูุบ ุงูุดุฑุงุก",
          "ูุจูุบ ุงูุจูุน",
          "ุงูุฑุจุญ",
          "ูุงูุด ุงูุฑุจุญ (%)",
          "ุชุตููู ุงูุฑุจุญ",
          "ูุฏุฉ ุงูุฏูุน (ููู)",
          "ุชุงุฑูุฎ ุงุณุชุญูุงู ุงูุฏูุน",
          "ูุงุชูุฑุฉ ุนุฑุถ ุงูุณุนุฑ",
          "ุชุงุฑูุฎ ุงููุงุชูุฑุฉ ุงูุฅููุชุฑูููุฉ",
          "ุฑูู ุงููุงุชูุฑุฉ ุงูุฅููุชุฑูููุฉ",
          "ุฑูู ุฅุฐู ุงูุชูุฑูุฏ",
          "ูุฏูู ุฅุฐู ุชูุฑูุฏ",
          "ุนุฏุฏ ุงููุฑููุงุช",
          "ุงูููุงุญุธุงุช",
        ];

        const excelData = selectedRows.map((order) => {
          const paymentStatus = getPaymentStatus(order);
          const deliveryStatus = getDeliveryStatus(order);
          const profit = (order.sellingAmount || 0) - (order.buyingAmount || 0);
          const margin = getProfitMargin(
            order.sellingAmount,
            order.buyingAmount
          );
          const profitBadge = getProfitBadge(margin);
          const client = buyers.find((buyer) => buyer.id === order.buyer);
          const attachmentCount = Object.keys(order.files || {}).length;

          return [
            order.ID || "",
            order.orderDate || "",
            client?.name || "ุบูุฑ ูุญุฏุฏ",
            order.clientOrderNumber || "ุบูุฑ ูุญุฏุฏ",
            paymentStatus.text,
            deliveryStatus.text,
            order.buyingAmount || 0,
            order.sellingAmount || 0,
            profit,
            margin.toFixed(1),
            profitBadge.text,
            order.paymentDuration || "",
            formatPaymentDueDate(order.paymentDueDate),
            order.relatedPrice || "",
            order.etktDate || "",
            order.etktNumber || "",
            order.grnNumber || "",
            order.hasGrn ? "ูุนู" : "ูุง",
            attachmentCount,
            order.notes || "",
          ];
        });

        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet([headers, ...excelData]);
        XLSX.utils.book_append_sheet(wb, ws, "ุฃูุงูุฑ ุงูุชูุฑูุฏ - ูุญุฏุฏุฉ");

        const filename = `ุฃูุงูุฑ_ุงูุชูุฑูุฏ_ุงููุญุฏุฏุฉ_${
          new Date().toISOString().split("T")[0]
        }.xlsx`;

        XLSX.writeFile(wb, filename);
        CreateToast(`ุชู ุชุตุฏูุฑ ${selectedRows.length} ุฃูุฑ ุชูุฑูุฏ ุจูุฌุงุญ`, "s");
      } catch (error) {
        console.error("Export selected error:", error);
        CreateToast("ูุดู ูู ุชุตุฏูุฑ ุงูุฃูุงูุฑ ุงููุญุฏุฏุฉ", "e");
      }
    };
    const handleExportSimple = () => {
      if (selectedRows.length === 0) {
        CreateToast("ูู ูุชู ุชุญุฏูุฏ ุฃู ุฃูุงูุฑ ุชูุฑูุฏ ููุชุตุฏูุฑ", "w");
        return;
      }

      try {
        const headers = [
          "ุฑูู ุงูุฑ ุชูุฑูุฏ ุงูุนููู",
          "ุงุณู ุงูุดุฑูุฉ",
          "ูุตู ุงูุทูุจูุฉ",
          "ุณุนุฑ ุงูุดุฑุงุก ุจุฏูู ุงูุถุฑูุจุฉ",
          "ุณุนุฑ ุงูุจูุน ุจุฏูู ุงูุถุฑูุจุฉ",
          "ุฑูู ุงููุงุชูุฑุฉ ุงูุงููุชุฑูููุฉ",
          "ุชุงุฑูุฎ ุงุตุฏุงุฑ ุงููุงุชูุฑุฉ ุงูุงููุชุฑูููุฉ",
          "ุฑูู GRN",
          "ุชู ุงูุฏูุน",
          "ุชู ุงูุชูุตูู",
          "ูุฏุฉ ุงูุฏูุน ุจ ุงูููู",
          "ุชุงุฑูุฎ ุงูุดุงุก ุงูุฑ ุงูุชูุฑูุฏ",
          "ููุงุญุธุงุช",
          "ููุงุญุธุงุช ุงุฎุฑู",
        ];
        const excelData = selectedRows.map((order) => {
          const paymentStatus = getPaymentStatus(order);
          const deliveryStatus = getDeliveryStatus(order);

          const client = buyers.find((buyer) => buyer.id === order.buyer);

          return [
            order.clientOrderNumber || "ุบูุฑ ูุญุฏุฏ",
            client?.name || "ุบูุฑ ูุญุฏุฏ",
            order.OrderDescription || "",
            order.buyingAmount || 0,
            order.sellingAmount || 0,
            order.etktNumber || "",
            order.etktDate || "",
            order.grnNumber || "",
            paymentStatus.text2,
            deliveryStatus.text2,
            order.paymentDuration || "",
            order.orderDate || "",
            order.notes || "",
            order.notes2 || "",
          ];
        });

        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet([headers, ...excelData]);
        XLSX.utils.book_append_sheet(wb, ws, "ุฃูุงูุฑ ุงูุชูุฑูุฏ - ูุญุฏุฏุฉ");

        const filename = `ุฃูุงูุฑ_ุงูุชูุฑูุฏ_ุงููุญุฏุฏุฉ_${
          new Date().toISOString().split("T")[0]
        }.xlsx`;

        XLSX.writeFile(wb, filename);
        CreateToast(`ุชู ุชุตุฏูุฑ ${selectedRows.length} ุฃูุฑ ุชูุฑูุฏ ุจูุฌุงุญ`, "s");
      } catch (error) {
        console.error("Export selected error:", error);
        CreateToast("ูุดู ูู ุชุตุฏูุฑ ุงูุฃูุงูุฑ ุงููุญุฏุฏุฉ", "e");
      }
    };
    const handleChange = () => {
      setShowChangeModal(true);
    };
    return (
      <div style={{ display: "flex", gap: "10px", alignItems: "center" }}>
        <button onClick={handleExport} className="btn-secondary">
          ุชุตุฏูุฑ ููุตู ุงููุญุฏุฏ
        </button>
        <button onClick={handleExportSimple} className="btn-secondary">
          ุชุตุฏูุฑ ูุจุณุท ุงููุญุฏุฏ
        </button>
        <button onClick={handleClear} className="Button danger">
          โ ุฅูุบุงุก ุงูุชุญุฏูุฏ
        </button>
        {canEdit && (
          <>
            <button
              key="Change"
              onClick={handleChange}
              className="add-item-btn"
            >
              ุชุบููุฑ
            </button>
            <button onClick={handleDelete} className="Button danger">
              ๐๏ธ ุญุฐู ุงููุญุฏุฏ ({selectedRows.length})
            </button>
          </>
        )}
      </div>
    );
  }, [selectedRows, toggleCleared]);
  const fetchOrders = async () => {
    setLoading(true);
    try {
      setInvoices(await GETCOLLECTION("Invoices"));
      setBuyers(await GETCOLLECTION("Customers"));
      setSuppliers(await GETCOLLECTION("Suppliers"));
      setPurchaseOrders(await GETCOLLECTION("purchaseOrders"));
    } catch (error) {
      CreateToast(error.message, "e");
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchOrders();
  }, [activeInnerPage]);

  const getDaysFromDueDate = (dueDateTimestamp) => {
    if (!dueDateTimestamp) return null;
    const dueDate = new Date(dueDateTimestamp.seconds * 1000);
    const today = new Date();
    const diffTime = dueDate - today;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const getPaymentStatus = (order) => {
    if (order.isPaid)
      return {
        status: "paid",
        text: "ูุฏููุน",
        className: "status-paid",
        text2: "ูุนู",
      };

    const daysFromDue = getDaysFromDueDate(order.paymentDueDate);
    if (!order.etktDate) {
      return {
        status: "pending",
        text: "ุบูุฑ ูุฏููุน",
        className: "status-overdue",
        text2: "ูุง",
      };
    }
    if (daysFromDue === null)
      return {
        status: "unknown",
        text: "ุบูุฑ ูุญุฏุฏ",
        className: "status-unknown",
        text2: "ูุง",
      };

    if (daysFromDue < 0)
      return {
        status: "overdue",
        text: `ูุชุฃุฎุฑ ${Math.abs(daysFromDue)} ููู`,
        className: "status-overdue",
        text2: "ูุง",
      };
    if (daysFromDue <= 3)
      return {
        status: "due-soon",
        text: `ูุณุชุญู ุฎูุงู ${daysFromDue} ููู`,
        className: "status-due-soon",
        text2: "ูุง",
      };
    return {
      status: "pending",
      text: `ุจุงูู ${daysFromDue} ููู`,
      className: "status-pending",
      text2: "ูุง",
    };
  };

  const getDeliveryStatus = (order) => {
    if (order.isDelivered)
      return {
        text: "ุชู ุงูุชุณููู",
        className: "delivery-completed",
        text2: "ูุนู",
      };
    return {
      text: "ูู ูุชู ุงูุชุณููู",
      className: "delivery-pending",
      text2: "ูุง",
    };
  };

  // Helper function to get profit margin
  const getProfitMargin = (sellingAmount, buyingAmount) => {
    if (!sellingAmount || !buyingAmount) return 0;
    return ((sellingAmount - buyingAmount) / buyingAmount) * 100;
  };

  // Helper function to get profit badge
  const getProfitBadge = (margin) => {
    if (margin >= 50) return { text: "ููุชุงุฒ", className: "profit-excellent" };
    if (margin >= 25) return { text: "ุฌูุฏ", className: "profit-good" };
    if (margin > 0) return { text: "ููุฎูุถ", className: "profit-low" };
    return { text: "ุฎุณุงุฑุฉ", className: "profit-loss" };
  };

  // Enhanced date filtering function
  const isDateInRange = (orderDate, dateRange, customFrom, customTo) => {
    if (dateRange === "all") return true;

    const orderDateObj = new Date(orderDate);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    switch (dateRange) {
      case "today":
        return orderDateObj.toDateString() === today.toDateString();
      case "yesterday":
        return orderDateObj.toDateString() === yesterday.toDateString();
      case "last-week":
        const weekAgo = new Date(today);
        weekAgo.setDate(weekAgo.getDate() - 7);
        return orderDateObj >= weekAgo && orderDateObj <= today;
      case "last-month":
        const monthAgo = new Date(today);
        monthAgo.setMonth(monthAgo.getMonth() - 1);
        return orderDateObj >= monthAgo && orderDateObj <= today;
      case "last-3-months":
        const threeMonthsAgo = new Date(today);
        threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
        return orderDateObj >= threeMonthsAgo && orderDateObj <= today;
      case "custom":
        if (!customFrom || !customTo) return true;
        const fromDate = new Date(customFrom);
        const toDate = new Date(customTo);
        return orderDateObj >= fromDate && orderDateObj <= toDate;
      default:
        return true;
    }
  };

  // Enhanced filtering logic
  const filteredOrders = useMemo(() => {
    return purchaseOrders.filter((order) => {
      // Search term filter
      const searchMatch =
        searchTerm === "" ||
        order.ID.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.clientOrderNumber
          ?.toLowerCase()
          .includes(searchTerm.toLowerCase()) ||
        order.etktNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.grnNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.notes?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        buyers
          .find((cp) => cp.id === order.buyer)
          ?.name?.toLowerCase()
          .includes(searchTerm.toLowerCase());

      // Payment status filter
      const paymentStatus = getPaymentStatus(order);
      const paymentMatch = (() => {
        if (filters.paymentStatus === "all") return true;
        if (filters.paymentStatus === "paid") return order.isPaid;
        if (filters.paymentStatus === "unpaid") return !order.isPaid;
        return filters.paymentStatus === paymentStatus.status;
      })();

      // Delivery status filter
      const deliveryMatch = (() => {
        if (filters.deliveryStatus === "all") return true;
        if (filters.deliveryStatus === "delivered") return order.isDelivered;
        if (filters.deliveryStatus === "pending") return !order.isDelivered;
        return true;
      })();

      // Client filter
      const clientMatch = (() => {
        if (filters.clientId === "all") return true;
        return order.buyer === filters.clientId;
      })();

      // Date range filter
      const dateMatch = isDateInRange(
        filters.searchDate === "purchaseOrderDate"
          ? order.orderDate
          : order.etktDate,
        filters.dateRange,
        filters.customDateFrom,
        filters.customDateTo
      );

      // Profit range filter
      const profit = (order.sellingAmount || 0) - (order.buyingAmount || 0);
      const margin = getProfitMargin(order.sellingAmount, order.buyingAmount);
      const profitMatch = (() => {
        if (filters.profitRange === "all") return true;
        if (filters.profitRange === "profitable") return profit > 0;
        if (filters.profitRange === "loss") return profit <= 0;
        if (filters.profitRange === "high-margin") return margin >= 25;
        if (filters.profitRange === "low-margin")
          return margin > 0 && margin < 25;
        return true;
      })();

      // Amount range filter
      const totalAmount = order.sellingAmount || 0;
      const amountMatch = (() => {
        if (filters.amountRange === "all") return true;
        if (filters.amountRange === "small") return totalAmount < 10000;
        if (filters.amountRange === "medium")
          return totalAmount >= 10000 && totalAmount < 50000;
        if (filters.amountRange === "large") return totalAmount >= 50000;
        if (filters.amountRange === "custom") {
          const min = parseFloat(filters.customAmountMin) || 0;
          const max = parseFloat(filters.customAmountMax) || Infinity;
          return totalAmount >= min && totalAmount <= max;
        }
        return true;
      })();

      // GRN filter
      const grnMatch = (() => {
        if (filters.hasGrn === "all") return true;
        if (filters.hasGrn === "yes") return order.hasGrn;
        if (filters.hasGrn === "no") return !order.hasGrn;
        return true;
      })();

      // Attachments filter
      const attachmentsMatch = (() => {
        if (filters.hasAttachments === "all") return true;
        const hasFiles = order.files && Object.keys(order.files).length > 0;
        if (filters.hasAttachments === "yes") return hasFiles;
        if (filters.hasAttachments === "no") return !hasFiles;
        return true;
      })();

      return (
        searchMatch &&
        paymentMatch &&
        deliveryMatch &&
        clientMatch &&
        dateMatch &&
        profitMatch &&
        amountMatch &&
        grnMatch &&
        attachmentsMatch
      );
    });
  }, [purchaseOrders, searchTerm, filters, buyers]);

  // Function to update filters
  const updateFilter = (key, value) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
  };

  // Function to clear all filters
  const clearAllFilters = () => {
    setFilters({
      paymentStatus: "all",
      deliveryStatus: "all",
      clientId: "all",
      dateRange: "all",
      customDateFrom: "",
      customDateTo: "",
      profitRange: "all",
      amountRange: "all",
      customAmountMin: "",
      customAmountMax: "",
      hasGrn: "all",
      hasAttachments: "all",
    });
    setSearchTerm("");
  };

  // Count active filters
  const activeFiltersCount =
    Object.entries(filters).filter(([key, value]) => {
      if (key.startsWith("custom")) return false; // Don't count custom range inputs
      return value !== "all" && value !== "";
    }).length + (searchTerm ? 1 : 0);
  const exportToExcel = () => {
    try {
      const headers = [
        "ุฑูู ุงูุฃูุฑ",
        "ุชุงุฑูุฎ ุงูุฃูุฑ",
        "ุงูุดุฑูุฉ",
        "ุฑูู ุงูุฑ ุชูุฑูุฏ ุงูุนููู",
        "ุญุงูุฉ ุงูุฏูุน",
        "ุญุงูุฉ ุงูุชุณููู",
        "ูุจูุบ ุงูุดุฑุงุก",
        "ูุจูุบ ุงูุจูุน",
        "ุงูุฑุจุญ",
        "ูุงูุด ุงูุฑุจุญ (%)",
        "ุชุตููู ุงูุฑุจุญ",
        "ูุฏุฉ ุงูุฏูุน (ููู)",
        "ุชุงุฑูุฎ ุงุณุชุญูุงู ุงูุฏูุน",
        "ูุงุชูุฑุฉ ุนุฑุถ ุงูุณุนุฑ",
        "ุชุงุฑูุฎ ุงููุงุชูุฑุฉ ุงูุฅููุชุฑูููุฉ",
        "ุฑูู ุงููุงุชูุฑุฉ ุงูุฅููุชุฑูููุฉ",
        "ุฑูู ุฅุฐู ุงูุชูุฑูุฏ",
        "ูุฏูู ุฅุฐู ุชูุฑูุฏ",
        "ุนุฏุฏ ุงููุฑููุงุช",
        "ุงูููุงุญุธุงุช",
      ];

      const excelData = filteredOrders.map((order) => {
        const paymentStatus = getPaymentStatus(order);
        const deliveryStatus = getDeliveryStatus(order);
        const profit = (order.sellingAmount || 0) - (order.buyingAmount || 0);
        const margin = getProfitMargin(order.sellingAmount, order.buyingAmount);
        const profitBadge = getProfitBadge(margin);
        const client = buyers.find((buyer) => buyer.id === order.buyer);
        const attachmentCount = Object.keys(order.files || {}).length;

        return [
          order.ID || "",
          order.orderDate || "",
          client?.name || "ุบูุฑ ูุญุฏุฏ",
          order.clientOrderNumber || "ุบูุฑ ูุญุฏุฏ",
          paymentStatus.text,
          deliveryStatus.text,
          order.buyingAmount || 0,
          order.sellingAmount || 0,
          profit,
          margin.toFixed(1),
          profitBadge.text,
          order.paymentDuration || "",
          formatPaymentDueDate(order.paymentDueDate),
          order.relatedPrice || "",
          order.etktDate || "",
          order.etktNumber || "",
          order.grnNumber || "",
          order.hasGrn ? "ูุนู" : "ูุง",
          attachmentCount,
          order.notes || "",
        ];
      });

      // Create a new workbook
      const wb = XLSX.utils.book_new();

      // Create summary data
      const summaryData = [
        ["ููุฎุต ุฃูุงูุฑ ุงูุชูุฑูุฏ"],
        [`ุฅุฌูุงูู ุงูุฃูุงูุฑ: ${analytics.totalOrders}`],
        [`ุฅุฌูุงูู ุงูุดุฑุงุก: ${analytics.totalBuyingAmount} ุฌ.ู`],
        [`ุฅุฌูุงูู ุงูุจูุน: ${analytics.totalSellingAmount} ุฌ.ู`],
        [`ุฅุฌูุงูู ุงูุฃุฑุจุงุญ: ${analytics.totalProfit} ุฌ.ู`],
        [""], // Empty row for spacing
      ];

      // Combine summary and headers with data
      const wsData = [...summaryData, headers, ...excelData];

      // Create worksheet
      const ws = XLSX.utils.aoa_to_sheet(wsData);

      // Add worksheet to workbook
      XLSX.utils.book_append_sheet(wb, ws, "ุฃูุงูุฑ ุงูุชูุฑูุฏ");

      // Generate file and download
      const filename = `ุฃูุงูุฑ_ุงูุชูุฑูุฏ_${
        new Date().toISOString().split("T")[0]
      }${activeFiltersCount > 0 ? "_ูููุชุฑ" : ""}.xlsx`;
      XLSX.writeFile(wb, filename);

      CreateToast("ุชู ุชุตุฏูุฑ ุงูุจูุงูุงุช ุฅูู Excel ุจูุฌุงุญ", "s");
    } catch (error) {
      console.error("Error exporting to Excel:", error);
      CreateToast("ูุดู ูู ุชุตุฏูุฑ ุงูุจูุงูุงุช", "e");
    }
  };
  const exportToExcelSimple = () => {
    try {
      const headers = [
        "ุฑูู ุงูุฑ ุชูุฑูุฏ ุงูุนููู",
        "ุงุณู ุงูุดุฑูุฉ",
        "ูุตู ุงูุทูุจูุฉ",
        "ุณุนุฑ ุงูุดุฑุงุก ุจุฏูู ุงูุถุฑูุจุฉ",
        "ุณุนุฑ ุงูุจูุน ุจุฏูู ุงูุถุฑูุจุฉ",
        "ุฑูู ุงููุงุชูุฑุฉ ุงูุงููุชุฑูููุฉ",
        "ุชุงุฑูุฎ ุงุตุฏุงุฑ ุงููุงุชูุฑุฉ ุงูุงููุชุฑูููุฉ",
        "ุฑูู GRN",
        "ุชู ุงูุฏูุน",
        "ุชู ุงูุชูุตูู",
        "ูุฏุฉ ุงูุฏูุน ุจ ุงูููู",
        "ุชุงุฑูุฎ ุงูุดุงุก ุงูุฑ ุงูุชูุฑูุฏ",
        "ููุงุญุธุงุช",
        "ููุงุญุธุงุช ุงุฎุฑู",
      ];

      const excelData = filteredOrders.map((order) => {
        const paymentStatus = getPaymentStatus(order);
        const deliveryStatus = getDeliveryStatus(order);
        const client = buyers.find((buyer) => buyer.id === order.buyer);

        return [
          order.clientOrderNumber || "ุบูุฑ ูุญุฏุฏ",
          client?.name || "ุบูุฑ ูุญุฏุฏ",
          order.OrderDescription || "",
          order.buyingAmount || 0,
          order.sellingAmount || 0,
          order.etktNumber || "",
          order.etktDate || "",
          order.grnNumber || "",
          paymentStatus.text2,
          deliveryStatus.text2,
          order.paymentDuration || "",
          order.orderDate || "",
          order.notes || "",
          order.notes2 || "",
        ];
      });

      // Create a new workbook
      const wb = XLSX.utils.book_new();

      // Create summary data

      // Combine summary and headers with data
      const wsData = [headers, ...excelData];

      // Create worksheet
      const ws = XLSX.utils.aoa_to_sheet(wsData);

      // Add worksheet to workbook
      XLSX.utils.book_append_sheet(wb, ws, "ุฃูุงูุฑ ุงูุชูุฑูุฏ");

      // Generate file and download
      const filename = `ุฃูุงูุฑ_ุงูุชูุฑูุฏ_${
        new Date().toISOString().split("T")[0]
      }${activeFiltersCount > 0 ? "_ูููุชุฑ" : ""}.xlsx`;
      XLSX.writeFile(wb, filename);

      CreateToast("ุชู ุชุตุฏูุฑ ุงูุจูุงูุงุช ุฅูู Excel ุจูุฌุงุญ", "s");
    } catch (error) {
      console.error("Error exporting to Excel:", error);
      CreateToast("ูุดู ูู ุชุตุฏูุฑ ุงูุจูุงูุงุช", "e");
    }
  };
  const standardColumns = [
    {
      name: "ุชุงุฑูุฎ ุงูุฃูุฑ",
      selector: (row) => row.orderDate,
      sortable: true,
      cell: (row) => (
        <div className="order-id-cell">
          <span className="order-date">{row.orderDate}</span>
        </div>
      ),
    },
    {
      name: "ุชุงุฑูุฎ ุงููุงุชูุฑุฉ ุงูุงูุชุฑูููุฉ",
      selector: (row) => row.etktDate,
      sortable: true,
      cell: (row) => (
        <div className="order-id-cell">
          <span className="order-date">{row.etktDate}</span>
        </div>
      ),
    },
    {
      name: "ุฑูู ุงูุงูุฑ ุนูุฏ ุงูุนููู",
      selector: (row) => row.clientOrderNumber,
      sortable: true,
      cell: (row) => (
        <div className="order-id-cell">
          <span className="order-number">{row.clientOrderNumber}</span>
        </div>
      ),
    },
    {
      name: "ูุตู ุงูุงูุฑ",
      selector: (row) => row.OrderDescription,
      sortable: true,
      cell: (row) => (
        <div className="order-id-cell">
          <span className="order-number">{row.OrderDescription}</span>
        </div>
      ),
    },
    {
      name: "ุงูุนููู",
      selector: (row) => row.buyer,
      sortable: true,
      cell: (row) => (
        <div className="order-id-cell">
          <span className="order-number">
            {buyers.find((cp) => cp.id === row.buyer)?.name || "ุบูุฑ ูุญุฏุฏ"}
          </span>
        </div>
      ),
    },
    {
      name: "ุญุงูุฉ ุงูุฏูุน",
      selector: (row) => {
        const status = getPaymentStatus(row);
        // Assign a priority number for sorting (lower = higher priority)
        switch (status.status) {
          case "paid":
            return 0; // Paid comes first
          case "overdue":
            return 1; // Overdue next
          case "due-soon":
            return 2; // Due soon after
          case "pending":
            return 3; // Pending (normal unpaid) last
          default:
            return 4; // Unknown status
        }
      },
      sortable: true,
      cell: (row) => {
        const status = getPaymentStatus(row);
        return (
          <span className={`payment-status ${status.className}`}>
            {status.text}
          </span>
        );
      },
    },
    {
      name: "ุญุงูุฉ ุงูุชุณููู",
      cell: (row) => {
        const delivery = getDeliveryStatus(row);
        return (
          <span className={`delivery-status ${delivery.className}`}>
            {delivery.text}
          </span>
        );
      },
      sortable: true,
    },
    {
      name: "ูุจูุบ ุงูุดุฑุงุก",
      selector: (row) => row.buyingAmount,

      cell: (row) => (
        <span className="amount-cell buying-amount">
          {(row.buyingAmount || 0).toLocaleString()} ุฌ.ู
        </span>
      ),
      sortable: true,
      right: true,
    },
    {
      name: "ูุจูุบ ุงูุจูุน",
      selector: (row) => row.sellingAmount,

      cell: (row) => (
        <span className="amount-cell selling-amount">
          {(row.sellingAmount || 0).toLocaleString()} ุฌ.ู
        </span>
      ),
      sortable: true,
      right: true,
    },
    {
      name: "ูุงูุด ุงูุฑุจุญ",
      selector: (row) => getProfitMargin(row.sellingAmount, row.buyingAmount),

      cell: (row) => {
        const margin = getProfitMargin(row.sellingAmount, row.buyingAmount);
        const badge = getProfitBadge(margin);
        return (
          <span className={`profit-badge ${badge.className}`}>
            {margin.toFixed(1)}% ({badge.text})
          </span>
        );
      },
      sortable: true,
    },
    {
      name: "ุงูุฅุฌุฑุงุกุงุช",
      cell: (row) => (
        <div className="order-actions">
          <div className="buttonIcon" onClick={() => viewOrder(row)}></div>
          {canEdit && (
            <>
              <div className="buttonIcon" onClick={() => deleteOrder(row)}>
                <MdDeleteOutline size={20} />
              </div>
            </>
          )}
        </div>
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: "150px",
    },
  ];

  const detailedColumns = [
    {
      name: "ุชูุงุฑูุฎ ูููุฉ",
      selector: (row) => row.orderDate,
      sortable: true,
      cell: (row) => (
        <div className="detailed-order-info">
          <div className="detailed-order-id">ุชุงุฑูุฎ ุงูุฃูุฑ: {row.orderDate}</div>
          <div className="detailed-order-dates">
            <div>ุชุงุฑูุฎ ุงููุงุชูุฑุฉ ุงููุชุฑูููุฉ: {row.etktDate}</div>
            <div>ุชุงุฑูุฎ ุงูุฏูุน: {formatPaymentDueDate(row.paymentDueDate)}</div>
          </div>
        </div>
      ),
    },
    {
      name: "ูุนูููุงุช ุงูุงูุฑ",
      selector: (row) => row.etktNumber,
      sortable: true,
      cell: (row) => (
        <div className="detailed-order-info">
          <div className="detailed-order-id">
            ุฑูู ุงููุงุชูุฑุฉ ุงููุชุฑูููุฉ: {row.etktNumber}
          </div>
          <div className="detailed-order-dates">
            <div>
              ุงูุนููู:
              {buyers.find((cp) => cp.id === row.buyer)?.name || "ุบูุฑ ูุญุฏุฏ"}
            </div>
            <div>ุฑูู ุงูุฑ ุชูุฑูุฏ ุงูุนููู : {row.clientOrderNumber}</div>
            <div>ูุงุชูุฑุฉ ุนุฑุถ ุงูุณุนุฑ : {row.relatedPrice}</div>
          </div>
          <div className="detailed-grn">
            {row.hasGrn && <span>ุฑูู ุงูุฅุฐู: {row.grnNumber}</span>}
          </div>
        </div>
      ),
    },
    {
      name: "ุงูุญุงูุฉ ูุงูุฏูุน",
      selector: (row) => {
        const status = getPaymentStatus(row);
        // Assign a priority number for sorting (lower = higher priority)
        switch (status.status) {
          case "paid":
            return 0; // Paid comes first
          case "overdue":
            return 1; // Overdue next
          case "due-soon":
            return 2; // Due soon after
          case "pending":
            return 3; // Pending (normal unpaid) last
          default:
            return 4; // Unknown status
        }
      },
      sortable: true,
      cell: (row) => {
        const paymentStatus = getPaymentStatus(row);
        const deliveryStatus = getDeliveryStatus(row);
        return (
          <div className="detailed-status">
            <div
              className={`detailed-payment-status ${paymentStatus.className}`}
            >
              ๐ณ {paymentStatus.text}
            </div>
            <div
              className={`detailed-delivery-status ${deliveryStatus.className}`}
            >
              ๐ {deliveryStatus.text}
            </div>
            <div className="detailed-payment-duration">
              ูุฏุฉ ุงูุฏูุน: {row.paymentDuration} ููู
            </div>
          </div>
        );
      },
    },
    {
      name: "ุงูุชุญููู ุงููุงูู",
      selector: (row) => (row.sellingAmount || 0) - (row.buyingAmount || 0),
      sortable: true,
      cell: (row) => {
        const profit = (row.sellingAmount || 0) - (row.buyingAmount || 0);
        const margin = getProfitMargin(row.sellingAmount, row.buyingAmount);
        const badge = getProfitBadge(margin);

        return (
          <div className="detailed-financial">
            <div className="detailed-amounts">
              <div>ุดุฑุงุก: {(row.buyingAmount || 0).toLocaleString()} ุฌ.ู</div>
              <div>
                ุดุฑุงุก ุจุนุฏ ุงูุถุฑูุจุฉ:
                {(
                  (row.buyingAmount * settings.Tax) / 100 + row.buyingAmount ||
                  0
                ).toLocaleString()}
                ุฌ.ู
              </div>
              <div>ุจูุน: {(row.sellingAmount || 0).toLocaleString()} ุฌ.ู</div>
              <div>
                ุจูุน ุจุนุฏ ุงูุถุฑูุจุฉ:
                {(
                  (row.sellingAmount * settings.Tax) / 100 +
                    row.sellingAmount || 0
                ).toLocaleString()}
                ุฌ.ู
              </div>
            </div>
            <div
              className={`detailed-profit ${
                profit >= 0 ? "profit-positive" : "profit-negative"
              }`}
            >
              ุฑุจุญ: {profit.toLocaleString()} ุฌ.ู
            </div>
            <span className={`detailed-profit-badge ${badge.className}`}>
              {margin.toFixed(1)}% ({badge.text})
            </span>
          </div>
        );
      },
    },
    {
      name: "ุงููุฑููุงุช",
      selector: (row) =>
        Object.keys(row.files || {}).length +
        Object.keys(row.customDocuments || {}).length,
      sortable: true,
      cell: (row) => {
        const attachmentCount =
          Object.keys(row.files || {}).length +
          Object.keys(row.customDocuments || {}).length;
        return (
          <div className="detailed-attachments">
            <div className="attachment-count">๐ {attachmentCount} ูุฑูู</div>
            <div className="attachment-types">
              {row.files?.orderPdf && (
                <span className="attachment-type">๐ PDF</span>
              )}
              {row.files?.paymentReceipt && (
                <span className="attachment-type">๐งพ ุฅูุตุงู</span>
              )}
              {row.files?.grnFile && (
                <span className="attachment-type">๐ ุฅุฐู</span>
              )}
              {row.files?.etktAttachment && (
                <span className="attachment-type">๐ ูุงุชูุฑุฉ ุงููุชุฑูููุฉ</span>
              )}
              {Object.keys(row.customDocuments || {}).length > 0 && (
                <span className="attachment-type">๐ ูุฑููุงุช ุงุฎุฑู</span>
              )}
            </div>
          </div>
        );
      },
    },
    {
      name: "ุงูุชุนูููุงุช",
      selector: (row) => row.OrderDescription,
      sortable: true,
      cell: (row) => (
        <div className="detailed-order-info">
          <div className="detailed-order-id">
            ูุตู ุงูุงูุฑ: {row.OrderDescription}
          </div>
          <div className="detailed-order-dates">
            <div>ููุงุญุธุงุช : {row.notes}</div>
            <div>ููุงุญุธุงุช ุงุถุงูุฉ : {row.notes2}</div>
          </div>
        </div>
      ),
    },
    {
      name: "ุงูุฅุฌุฑุงุกุงุช",
      cell: (row) => (
        <div className="order-actions">
          <div className="buttonIcon" onClick={() => viewOrder(row)}>
            <IoEyeSharp size={20} />
          </div>
          {canEdit && (
            <>
              {" "}
              <div className="buttonIcon" onClick={() => editOrder(row)}>
                <MdEdit size={20} />
              </div>
              <div className="buttonIcon" onClick={() => deleteOrder(row)}>
                <MdDeleteOutline size={20} />
              </div>
            </>
          )}
        </div>
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: "150px",
    },
  ];

  const viewOrder = (order) => {
    setTargetOrder(order);
    setActiveInnerPage("VIEW/EDIT");
    setInitialEditing(false);
  };

  const editOrder = (order) => {
    setTargetOrder(order);
    setActiveInnerPage("VIEW/EDIT");
    setInitialEditing(true);
  };
  const deleteOrder = async (order) => {
    try {
      await DELETEDOC("purchaseOrders", order.ID);
      const updatedOrders = purchaseOrders.filter(
        (oldOrder) => oldOrder.ID !== order.ID
      );
      setPurchaseOrders(updatedOrders);
      CreateToast("ุชู ุงูุญุฐู", "s");
    } catch (error) {
      console.log(error);
      CreateToast("ูุดููุฉ ูู ุงูุญุฐู", "e");
    }
  };

  // Calculate analytics
  const analytics = {
    totalOrders: filteredOrders.length,
    totalBuyingAmount: filteredOrders.reduce(
      (sum, order) => sum + (order.buyingAmount || 0),
      0
    ),
    totalSellingAmount: filteredOrders.reduce((sum, order) => {
      return sum + (order.sellingAmount || 0);
    }, 0),
    totalProfit: filteredOrders.reduce(
      (sum, order) =>
        sum + ((order.sellingAmount || 0) - (order.buyingAmount || 0)),
      0
    ),
    paidOrders: filteredOrders.filter(
      (order) => getPaymentStatus(order).status === "paid"
    ).length,
    deliveredOrders: filteredOrders.filter((order) => order.isDelivered).length,
    overdueOrders: filteredOrders.filter(
      (order) => getPaymentStatus(order).status === "overdue"
    ).length,
    unknownOrders: filteredOrders.filter(
      (order) => getPaymentStatus(order).status === "unknown"
    ).length,
    dueSoonOrders: filteredOrders.filter(
      (order) => getPaymentStatus(order).status === "due-soon"
    ).length,
    averageMargin:
      filteredOrders.length > 0
        ? filteredOrders.reduce(
            (sum, order) =>
              sum + getProfitMargin(order.sellingAmount, order.buyingAmount),
            0
          ) / filteredOrders.length
        : 0,
  };

  return (
    <div className="PurchaseOrders" dir="rtl">
      {activeInnerPage === "Home" && (
        <>
          <h1>ุฅุฏุงุฑุฉ ุฃูุงูุฑ ุงูุชูุฑูุฏ</h1>
          {/* Enhanced Filter Controls */}
          <div className="filter-controls">
            <div className="filter-controls-right">
              {canEdit && (
                <>
                  <button
                    className="add-item-btn"
                    onClick={() => {
                      setActiveInnerPage("import");
                    }}
                  >
                    ุงุณุชูุฑุงุฏ
                  </button>
                </>
              )}
            </div>
          </div>

          {loading ? (
            <div className="loading-container">ุฌุงุฑู ุชุญููู ุฃูุงูุฑ ุงูุชูุฑูุฏ...</div>
          ) : (
            <DataTable
              title={`ูุงุฆูุฉ ุฃูุงูุฑ ุงูุชูุฑูุฏ (${filteredOrders.length})`}
              columns={
                viewMode === "standard" ? standardColumns : detailedColumns
              }
              data={filteredOrders}
              pagination
              theme={
                window.matchMedia &&
                window.matchMedia("(prefers-color-scheme: dark)").matches
                  ? "dark"
                  : "light"
              }
              responsive
              highlightOnHover
              striped
              paginationPerPage={10}
              paginationRowsPerPageOptions={[
                5, 10, 15, 20, 50, 100, 150, 200, 250,
              ]}
              selectableRows
              contextMessage={{
                singular: "ุงูุฑ ุชูุฑูุฏ",
                plural: "ุงููุฑ ุชูุฑูุฏ",
                message: "ูุญุฏุฏุฉ",
              }}
              onSelectedRowsChange={handleRowSelected}
              clearSelectedRows={toggleCleared}
              selectableRowsHighlight
              selectableRowsNoSelectAll={false}
              contextActions={contextActions}
              noDataComponent={
                <div className="no-items">
                  ูุง ุชูุฌุฏ ุฃูุงูุฑ ุชูุฑูุฏ ุชุทุงุจู ูุนุงููุฑ ุงูุจุญุซ
                </div>
              }
              customStyles={{
                rows: {
                  style: {
                    minHeight: viewMode === "detailed" ? "100px" : "60px",
                  },
                },
              }}
            />
          )}
        </>
      )}

      {activeInnerPage === "import" && (
        <BulkImportPurchaseOrders setActiveInnerPage={setActiveInnerPage} />
      )}
    </div>
  );
};

export default PurchaseOrders;
